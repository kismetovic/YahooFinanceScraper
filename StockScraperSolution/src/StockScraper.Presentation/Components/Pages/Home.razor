@page "/"

@rendermode InteractiveServer

@using StockScraper.Contracts.Stocks
@using System.Text.Json

@inject HttpClient Http

<div class="card">
    <div class="card-body">
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="datePicker" class="form-label">Select Date</label>
                <input type="date" id="datePicker" class="form-control" @bind="SelectedDate" />
            </div>
            <div class="col-md-6">
                <label for="tickersInput" class="form-label">Enter tickers (comma-separated)</label>
                <input type="text" id="tickersInput" class="form-control" @bind="Tickers"/>
            </div>
        </div>
        <button class="btn btn-primary" @onclick="SubmitData" disabled="@IsLoading">@(IsLoading ? "Loading..." : "Submit")</button>
    </div>
</div>

@if (Results is not null)
{
    <div class="card mt-3">
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Ticker</th>
                        <th>Company Name</th>
                        <th>Previous Close Price</th>
                        <th>Open Price</th>
                        <th>Market Cap</th>
                        <th>Year Founded</th>
                        <th>Employees</th>
                        <th>Headquarters</th>
                        <th>Date Retrieved</th>
                        <th>Date Scraped</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var stock in Results)
                    {
                        <tr>
                            <td>@stock.Ticker</td>
                            <td>@stock.CompanyName</td>
                            <td>@stock.PreviousClosePrice</td>
                            <td>@stock.OpenPrice</td>
                            <td>@stock.MarketCap@stock.MarketCapCurrency</td>
                            <td>@stock.YearFounded</td>
                            <td>@stock.NumberOfEmployees</td>
                            <td>@stock.HeadquartersCity, @stock.HeadquartersState</td>
                            <td>@stock.DateRetrieved</td>
                            <td>@stock.DateScraped</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private DateTime SelectedDate { get; set; } = DateTime.UtcNow;
    private string? Tickers { get; set; }
    private List<StockResponse>? Results { get; set; } = new List<StockResponse>();
    private bool IsLoading { get; set; } = false;

    private async Task SubmitData()
    {
        if (string.IsNullOrWhiteSpace(Tickers))
        {
            return;
        }

        IsLoading = true;
        var tickersList = Tickers.Split(',').Select(t => t.Trim()).ToList();
        foreach(var ticker in tickersList) {
            var request = new ScrapeStocksRequest(SelectedDate, ticker);
            var response = await Http.PostAsJsonAsync("/scrape", request);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<StockResponse>();
                Results!.Add(result!);
                StateHasChanged();
            }
        }
        IsLoading = false;
    }
}
